<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--    Spring的配置文件，这里主要配置和业务逻辑有关的，比如数据源，事务控制等 -->

    <!-- 排除掉控制器，其他业务逻辑都需要交给Spring去扫描 -->
    <context:component-scan base-package="com.sticker">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--================Spring配置文件的核心点（数据源、mybatis整合、事务控制）===========================-->
    <!--  数据源、mybatis、事务控制是一环扣一环的  -->

    <!--    ===========================数据源的配置 =====================================================    -->
    <!--    引入外部配置文件-->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>


    <!--    ==============================mybatis整合的配置==================================================    -->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--        指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--        指定数据源，引用的就是上面配置的数据源，看ID-->
        <property name="dataSource" ref="pooledDataSource"></property>
        <!--        指定mybatis的mapper的文件位置，扫描mapper下的所有xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>

        <!--        我们可以不要mybatis-config.xml，直接将mybatis需要的配置以property的形式配置这个bean中即可
                    但是为了清晰，最好还是单独创建一个mybatis-config.xml进行配置-->

    </bean>

    <!--    配置扫描器，将mybatis接口（即dao接口）的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--        扫描所有的dao接口的实现，加入到ioc容器中-->
        <property name="basePackage" value="com.sticker.crud.dao"></property>
    </bean>

    <!--    配置一个可以执行批量的sqlSession   -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
    <!--        设置执行器类型为批量的-->
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!--    ===============================事务控制的配置=================================================    -->

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--        控制住数据源 数据源池（数据库连接池）中数据库连接的开启、关闭、提交和回滚操作 用该事务管理器来做-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>

    <!--    开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）-->
    <aop:config>
        <!--        切入点表达式    注意下面写法：第一个*后面有空格
          下面切入点表达式的意思：service包下的所有类以及其子包下的所有类中的（任意参数的）所有方法都可以来控制事务
         第一个..表示包括service的子包,也就是包括service包下的的所有类  第二个..表示方法任意参数都可
         第一个*表示返回值类型为任意类型（*前面需要有的访问权限控制符public可不写，因为默认就是public,除非你要设成private等）
         第二个*表示任意方法名，即类中所有方法都可以来控制事务-->
        <!-- txPoint事务切入点 -->
        <aop:pointcut id="txPoint" expression="execution(* com.sticker.crud.service..*(..))" />
        <!--        配置事务增强   txAdvice切入规则,在下面配置  txPoint切入的方法,就是上面表达式定义的方法  -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!--    配置事务增强，事务如何切入，即切入规则-->
    <!-- 上面切入点表达式切的每个方法都是事务，每一个以get开头的方法都是只读的  -->
    <!--  这里配置的transaction-manager="transactionManager"，使得和上面id为transactionManager的事务管理器产生联系  -->
    <!-- 注意下面的transaction-manager默认参数就是transactionManager，因此如果你上面配置的事务管理器的id是transactionManager的话，
    这里的transaction-manager="transactionManager"可以省略不写，但是不是的话，就一定要配置，并且和上面事务管理器的id值一样 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--            *代表所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--            以get开头的所有方法,定义为都是查询，即只读：read-only="true"
            明确指定，可优化程序的性能-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

</beans>